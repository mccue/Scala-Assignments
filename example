package example


object Lists {

  private var newPass: Boolean = true
  private var sumResult: Int = 0
  private var maxValue: Int = Int.MinValue

  /**
   * This method computes the sum of all elements in the list xs. There are
   * multiple techniques that can be used for implementing this method, and
   * you will learn during the class.
   *
   * For this example assignment you can use the following methods in class
   * `List`:
   *
   *  - `xs.isEmpty: Boolean` returns `true` if the list `xs` is empty
   *  - `xs.head: Int` returns the head element of the list `xs`. If the list
   *    is empty an exception is thrown
   *  - `xs.tail: List[Int]` returns the tail of the list `xs`, i.e. the the
   *    list `xs` without its `head` element
   *
   *  ''Hint:'' instead of writing a `for` or `while` loop, think of a recursive
   *  solution.
   *
   * @param xs A list of natural numbers
   * @return The sum of all elements in `xs`
   */
    def sum(xs: List[Int]): Int = {
      if (newPass)
        sumResult = 0
        newPass = false
      if (xs.isEmpty) {
        newPass = true
        return sumResult
      }
      else
        sumResult += xs.head
//        println (xs.tail.mkString(","))
        sum(xs.tail)
    }
  /**
   * This method returns the largest element in a list of integers. If the
   * list `xs` is empty it throws a `java.util.NoSuchElementException`.
   *
   * You can use the same methods of the class `List` as mentioned above.
   *
   * ''Hint:'' Again, think of a recursive solution instead of using looping
   * constructs. You might need to define an auxiliary method.
   *
   * @param xs A list of natural numbers
   * @return The largest element in `xs`
   * @throws java.util.NoSuchElementException if `xs` is an empty list
   */
    def max(xs: List[Int]): Int = {
      if (newPass) {
        maxValue = Int.MinValue
        if (xs.isEmpty) {throw new NoSuchElementException("List cannot be empty")}
        newPass = false
      }
      if (xs.isEmpty) {
        newPass = true
        return maxValue
      }
      else
        maxValue = maxValue.max(xs.head)
        max(xs.tail)
  }
}

  object StartMain {
    def main(args: Array[String]) {
      println("Sum")
      println(Lists.sum(List(1,2,3,0)))
      println(Lists.sum(List()))
      println(Lists.sum(List(1)))
      println(Lists.sum(List(-1,2,3,-10)))
      println("Max")
      println(Lists.max(List(1,2,3,0)))
      println(Lists.max(List(3,-1,2,3,-10,10000000)))
      println(Lists.max(List(0)))
      println(Lists.max(List()))
    }
  }
